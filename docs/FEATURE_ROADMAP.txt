FEATURE_SPECIFICATIONS

# üéØ Feature Specifications

## üöÄ CURRENT STATUS: Feature Gates System Complete ‚úÖ
**Last Updated**: January 2025
**Migration Status**: Phase 1 of Branch2 ‚Üí Main migration COMPLETE

### **‚úÖ Recently Completed: Dynamic Feature Gates & Limits System**
Our comprehensive tier-based access control system is now fully operational:
- **Admin Control**: Full CRUD interface for managing feature access and daily limits
- **Dynamic Limits**: Search, watch time, and favorite limits configurable without code changes
- **Access Control**: Scrolling lyrics page restricted to HERO users with upgrade prompts
- **User Experience**: Contextual upgrade messages with direct pricing page integration
- **Technical**: Robust validation, error handling, and graceful fallbacks

**Next Phase**: SVG Chord Library Building System migration from Branch2

## üîÑ Video Flipping Controls
### Free Tier ‚úÖ
- **Vertical Flip**: CSS `transform: rotateX(180deg)`
- **Horizontal Flip**: CSS `transform: rotateY(180deg)`
- **Both**: Combined transforms
- **Implementation**: Applied to YouTube iframe container

## üîÅ Custom Loop Timeline
### Premium Only üíé
- **Timeline UI**: Draggable start/stop markers
- **Precision**: Sub-second accuracy (0.1s increments)
- **Loop Logic**: Monitor currentTime vs bounds
- **Auto-seek**: Jump to start when reaching end
- **Persistence**: Save/load custom loops per user

## üîç Search & Discovery
### Free Tier
- **Daily Limit**: 20 searches per day
- **History**: Last 5 searches saved
- **Results**: YouTube Data API v3 integration

### Premium Tier
- **Unlimited**: No daily search limits
- **Full History**: All searches saved indefinitely
- **Advanced Filters**: Duration, quality, upload date

## üîê User Management
- **Authentication**: Supabase Auth (email + OAuth)
- **Profiles**: Extended user data in user_profiles table
- **Usage Tracking**: Analytics and limit enforcement

## üö™ Feature Gates System ‚úÖ COMPLETED
### **Dynamic Tier-Based Access Control**
Our comprehensive feature gating system provides admin-configurable access control for all premium features.

#### **üèóÔ∏è Architecture**
- **Database**: JSONB structure in `admin_settings` table with `setting_key='feature_gates'`
- **Admin Interface**: Full CRUD management via `/admin/settings` with validation
- **Real-time**: Dynamic loading and enforcement across all pages
- **Fallback**: Graceful degradation if feature gates fail to load

#### **üìä Daily Limits Management**
**Search Limits** (Admin Configurable):
- **Freebird**: 8 searches/day
- **Roadie**: 24 searches/day
- **Hero**: 100 searches/day

**Watch Time Limits** (Admin Configurable):
- **Freebird**: 60 minutes/day (1 hour)
- **Roadie**: 180 minutes/day (3 hours)
- **Hero**: 480 minutes/day (8 hours)

**Favorite Limits** (Admin Configurable):
- **Freebird**: 0 favorites saved
- **Roadie**: 12 favorites saved
- **Hero**: Unlimited (-1)

#### **üéØ Implemented Feature Gates**
**1. Scrolling Lyrics (`scrolling_lyrics`)** - HERO Only
- **Access Control**: Blocks `/watch_s` page for non-hero users
- **UX**: Upgrade modal on scroll button click with "UPGRADE TO HERO" + "CANCEL"
- **Redirect**: Auto-redirects non-hero users from watch_s to regular watch page

**2. Login Resume (`login_resume`)** - ROADIE or Higher
- **Functionality**: Auto-resume last video on login
- **Implementation**: Ready for integration with UserContext
- **Message**: "Upgrade to ROADIE or higher to automatically resume your last video on login!"

**3. Caption Sharing (`caption_sharing`)** - ROADIE or Higher
- **Functionality**: Share videos with custom captions and timing
- **Implementation**: Ready for integration with sharing components
- **Message**: "Upgrade to ROADIE or higher to share videos with custom captions!"

#### **üîß Technical Implementation**
**Admin Interface** (`components/admin/FeatureGates.js`):
- **Tier Selection**: Multi-checkbox system (freebird/roadie/hero)
- **Custom Messages**: Configurable upgrade prompts per feature
- **Validation**: Pre-save validation with detailed error reporting
- **Live Preview**: Test configuration before saving

**Access Control Logic**:
```javascript
// Example: Scrolling lyrics access check
const scrollingLyricsGate = featureGates?.feature_gates?.scrolling_lyrics
const userTier = profile?.subscription_tier || 'freebird'
const requiredTiers = scrollingLyricsGate.required_tiers || ['hero']
const hasAccess = requiredTiers.includes(userTier)
```

**Dynamic Limits Integration**:
```javascript
// Watch time limits now use admin settings instead of hardcoded values
const dailyLimits = featureGates?.daily_watch_time_limits || fallbackLimits
const userLimit = dailyLimits[planType] || dailyLimits.freebird
```

#### **‚úÖ Benefits Achieved**
- **Admin Control**: No code changes needed to modify limits or add features
- **User Experience**: Consistent upgrade messaging with direct pricing links
- **Scalability**: Easy to add new feature gates without database migrations
- **Reliability**: Robust validation and fallback systems prevent errors
- **Flexibility**: Supports complex tier combinations and custom messaging

## üìù Caption Management System
### Premium Only üíé
- **Text Captions**: Timeline-based text annotations with start/stop times
- **Chords Captions**: Chord diagram integration (planned)
- **Auto-Gen**: AI-generated content (planned)
- **Sharing**: Share captions between paid users
- **Inline Editing**: Edit captions directly in control strips
- **Modal Editor**: Advanced caption management interface

## üé∏ Creator Revenue Sharing System
### Platform Feature üåü
- **Per-Channel Watch Time Tracking**: Monitor user engagement by YouTube channel
- **Top 100 Creators**: Monthly leaderboard by watch time
- **10% Revenue Sharing**: Transparent payout system
- **Public Leaderboard**: Community transparency and engagement
- **Monthly Payouts**: Automated creator compensation
- **Channel Analytics**: Detailed performance metrics

---

# üöÄ DEVELOPMENT ROADMAP: From MVP to Music Empire

## üéØ MVP Features (3-4 weeks)

### **1. Enhanced Video Controls** ‚≠ê PRIORITY 1
- **Auto-unflip during ads** (ad detection)
- **Estimate**: 2-3 days
- **Complexity**: Medium (YouTube Player API events)
- **API**: YouTube Player iframe API

### **2. Session State & Resume** ‚≠ê PRIORITY 1  
- **Save exact timeline position + loop settings**
- **Resume where user left off**
- **Estimate**: 1-2 days
- **Complexity**: Low (database + localStorage)

### **3. Usage Tracking & Limits** ‚≠ê PRIORITY 1
- **Track video watch time, search usage**
- **Enforce tier limits (searches/day, watch minutes)**  
- **Estimate**: 2-3 days
- **Complexity**: Medium (database functions + UI enforcement)

### **4. Legal Foundation** ‚úÖ COMPLETED
- **Privacy Policy, Terms of Service, Pricing pages**
- **Menu integration and navigation**
- **Estimate**: 1 day
- **Complexity**: Low

### **5. UI/UX Enhancement** ‚≠ê PRIORITY 2
- **Home page redesign with floating modals**
- **"How It Works", "Features", "Getting Started" modals**
- **Estimate**: 2-3 days
- **Complexity**: Medium (responsive design + animations)

### **6. Top Banner System** ‚úÖ COMPLETED
- **Admin-controlled announcement banner**
- **Estimate**: 0.5 days  
- **Complexity**: Low (already designed)

### **7. Pricing Tiers Admin** ‚≠ê PRIORITY 2
- **Complete admin interface for pricing management**
- **Estimate**: 1 day
- **Complexity**: Low (UI + database already designed)

### **8. Top 100 Creators Tracking** ‚≠ê MVP ADDITION
- **Monthly creator leaderboard by watch time**
- **10% revenue sharing transparency**
- **Public leaderboard page**
- **Estimate**: 3-4 days
- **Complexity**: Medium (aggregation + public page)

### **9. Caption Management Integration** ‚≠ê NEW PRIORITY
- **Supabase integration for captions**
- **User caption storage and retrieval**
- **Inline editing in control strips**
- **Estimate**: 2-3 days
- **Complexity**: Medium (database integration + UI updates)

### **10. Watch Time Tracking System** ‚≠ê NEW PRIORITY
- **Per-channel watch time monitoring**
- **User engagement analytics**
- **Creator revenue calculation foundation**
- **Estimate**: 2-3 days
- **Complexity**: Medium (tracking logic + database updates)

## üéµ Phase 2: Music Magic (4-5 weeks)

### **11. Custom Caption Creator** ‚≠ê GAME-CHANGER
- **Timeline-based text annotations**
- **120-char text strings with start/stop times**
- **No overlap validation, edit existing segments**
- **Estimate**: 4-5 days
- **Complexity**: Medium-High (timeline UI + sync logic)

### **12. Basic Chord Diagrams** ‚≠ê GAME-CHANGER
- **Manual chord name entry ‚Üí visual diagrams**
- **Integration with custom captions**
- **Sync with video timeline**
- **Estimate**: 3-4 days  
- **Complexity**: Medium 
- **APIs**: VexChords, ChordJS, or UberChord API
- **API URL**: `https://api.uberchord.com/v1/chords/{chordName}`

### **13. Song Name Detection** ‚≠ê ENHANCEMENT
- **Parse YouTube titles for artist/song**
- **Smart title cleaning algorithms**
- **Auto-populate song search fields**
- **Estimate**: 2-3 days
- **Complexity**: Medium (text parsing + validation)

### **14. Enhanced Search Features** ‚≠ê PREMIUM
- **Advanced video filters and sorting**
- **Saved search collections**
- **Search history analytics**
- **Estimate**: 2-3 days
- **Complexity**: Medium

### **15. Caption Sharing System** ‚≠ê NEW FEATURE
- **Share captions between paid users**
- **Sharing links with expiration and usage limits**
- **Import captions from shared favorites**
- **Estimate**: 3-4 days
- **Complexity**: Medium (sharing logic + UI)

### **16. Creator Analytics Dashboard** ‚≠ê NEW FEATURE
- **Channel performance metrics**
- **Watch time analytics**
- **Revenue projection tools**
- **Estimate**: 4-5 days
- **Complexity**: Medium-High (analytics + visualization)

## üèÜ Phase 3: Ultimate Platform (6-8 weeks)

### **17. Ultimate Guitar Integration** ‚≠ê HOLY GRAIL
- **Demand-driven song scraping** (only when users request specific songs)
- **Smart accuracy validation** (video length, key consistency, cover detection)
- **User request form** for premium members to submit video URLs
- **Quality scoring system** to ensure caption accuracy
- **Estimate**: 7-10 days
- **Complexity**: High (scraper integration + validation logic)
- **APIs**: Ultimate Guitar scraper endpoints
- **GitHub**: `https://github.com/Pilfer/ultimate-guitar-scraper`

### **18. Auto-Synchronized Chords** ‚≠ê REVOLUTIONARY
- **User-requested chord timelines** from UG database
- **Song structure detection** (verse, chorus, bridge) with timing
- **Pre-timed chord changes** that sync with video playback
- **Fallback handling** for videos that don't match scraped data
- **Estimate**: 5-7 days
- **Complexity**: High (data parsing + timeline sync + validation)

### **19. Advanced Practice Features** ‚≠ê PREMIUM
- **Loop sections with chord displays**
- **Slow-down playback with synchronized chords**
- **Export practice sessions**
- **Practice mode with metronome**
- **Estimate**: 3-4 days
- **Complexity**: Medium (YouTube Player API + UI)

### **20. Creator Revenue Dashboard** ‚≠ê BUSINESS
- **Creator portal for earnings tracking**
- **Payment history and analytics**
- **Creator onboarding and verification**
- **Estimate**: 4-5 days
- **Complexity**: Medium-High

### **21. Advanced Caption Features** ‚≠ê NEW FEATURE
- **Caption templates and presets**
- **Bulk caption operations**
- **Caption versioning and history**
- **Estimate**: 3-4 days
- **Complexity**: Medium

## üöÄ Phase 4: Platform Scale (8+ weeks)

### **22. Advanced Tab Features** ‚≠ê ENTERPRISE
- **Full guitar tablature display**
- **Bass tabs, multiple instruments**
- **GuitarPro-style playback with timing**
- **Interactive tab following**
- **Estimate**: 10-15 days
- **Complexity**: Very High (complex rendering + sync)

### **23. Simple HTTP API** ‚≠ê PLATFORM EXPANSION
- **Basic endpoints to serve chord SVGs**
- **Public API access to chord library**
- **Free tier for developers and musicians**
- **Rate limiting and usage tracking**
- **Estimate**: 3-5 days
- **Complexity**: Low (S3 public access + basic API endpoints)

### **24. User-Generated Content** ‚≠ê COMMUNITY
- **Share custom caption/chord sets**
- **Community-contributed timings**
- **Rating and review system**
- **Content moderation tools**
- **Estimate**: 8-12 days
- **Complexity**: High (moderation + social features)

### **25. Mobile Application** ‚≠ê EXPANSION
- **React Native app with core features**
- **Offline chord charts and saved content**
- **Mobile-optimized video controls**
- **Estimate**: 15-20 days
- **Complexity**: Very High

### **26. Video Hosting Platform** ‚≠ê FUTURE VISION
- **Creator direct uploads**
- **Multi-platform video hosting**
- **Advanced monetization tools**
- **Estimate**: 20-30 days
- **Complexity**: Extremely High
- **APIs**: Cloudflare Stream, Vimeo API, Wistia
- **API URLs**: 
  - Vimeo: `https://api.vimeo.com`
  - Wistia: `https://wistia.com/support/developers`
  - Cloudflare: `https://api.cloudflare.com/client/v4/accounts/{account_id}/stream`

### **27. Creator Economy Platform** ‚≠ê NEW VISION
- **Advanced revenue sharing models**
- **Creator marketplace for lessons**
- **Subscription-based creator channels**
- **Estimate**: 15-20 days
- **Complexity**: Very High

## üîå API Integration Summary

### **Core Video APIs**
- **YouTube Data API v3**: `https://googleapis.com/youtube/v3/`
- **YouTube Player API**: `https://www.youtube.com/iframe_api`

### **Music & Chord APIs**
- **UberChord API**: `https://api.uberchord.com/v1/`
- **Ultimate Guitar Scraper**: Various GitHub implementations
- **VexChords**: JavaScript library (client-side)
- **ChordJS**: JavaScript library (client-side)

### **Business & Analytics APIs**
- **Stripe Payments**: `https://api.stripe.com/v1/`
- **Supabase**: Self-hosted database and auth

### **Future Video Hosting APIs**
- **Vimeo API**: `https://api.vimeo.com`
- **Wistia API**: `https://wistia.com/support/developers`
- **Cloudflare Stream**: `https://api.cloudflare.com/client/v4/`

## üóÑÔ∏è Database Schema Overview

### **Core Tables**
- **`user_profiles`**: User authentication and subscription data
- **`subscriptions`**: Stripe subscription management
- **`favorites`**: User-saved videos with sharing capabilities
- **`captions`**: User-created captions with sharing support
- **`custom_loops`**: User-created video loops

### **Creator Revenue System**
- **`channel_watch_time`**: Per-channel watch time tracking
- **`creator_payouts`**: Monthly creator compensation
- **`public_leaderboard`**: Transparent creator rankings

### **Sharing & Collaboration**
- **`sharing_links`**: Advanced sharing with expiration and limits
- **`saved_searches`**: User search history and preferences

### **Analytics & Usage**
- **`user_usage`**: Daily user activity tracking
- **`billing_history`**: Payment and subscription history

### **Admin & Configuration** ‚úÖ IMPLEMENTED
- **`admin_settings`**: JSONB-based configuration system for dynamic feature management

#### **Feature Gates Configuration Structure**
```json
{
  "feature_gates": {
    "scrolling_lyrics": {
      "display_name": "Scrolling Lyrics Page",
      "description": "Access to enhanced scrolling lyrics page (watch_s)",
      "required_tiers": ["hero"],
      "is_enabled": true,
      "upgrade_message": "Upgrade to HERO to access Scrolling Lyrics!"
    },
    "login_resume": {
      "display_name": "Login Resume Video",
      "description": "Automatically resume last watched video on login",
      "required_tiers": ["roadie", "hero"],
      "is_enabled": true,
      "upgrade_message": "Upgrade to ROADIE or higher for auto-resume!"
    },
    "caption_sharing": {
      "display_name": "Caption Sharing",
      "description": "Share videos with custom captions and timing",
      "required_tiers": ["roadie", "hero"],
      "is_enabled": true,
      "upgrade_message": "Upgrade to ROADIE or higher to share captions!"
    }
  },
  "daily_search_limits": {
    "freebird": 8,
    "roadie": 24,
    "hero": 100
  },
  "daily_watch_time_limits": {
    "freebird": 60,
    "roadie": 180,
    "hero": 480
  },
  "favorite_limits": {
    "freebird": 0,
    "roadie": 12,
    "hero": -1
  },
  "global_settings": {
    "maintenance_mode": false,
    "announcement_message": ""
  }
}
```

## üìä Success Metrics by Phase

### **MVP Success (Month 1)**
- 1,000+ registered users
- 100+ daily active users
- Basic revenue from subscriptions
- Creator leaderboard engagement
- Caption system adoption

### **Phase 2 Success (Month 3)**
- 10,000+ registered users
- 1,000+ daily active users
- Custom caption usage > 50%
- Chord diagram feature adoption
- Creator revenue sharing active

### **Phase 3 Success (Month 6)**
- 50,000+ registered users
- 5,000+ daily active users
- Ultimate Guitar integration driving growth
- Creator revenue sharing program active
- Advanced caption collaboration

### **Phase 4 Success (Year 1)**
- 500,000+ registered users
- Platform-hosted content library
- Industry recognition as music learning leader
- Sustainable creator economy
- Global caption sharing community

## üéØ Estimated Total Timeline
- **MVP Launch**: 4 weeks
- **Music Platform**: 3 months
- **Industry Leader**: 6 months
- **Platform Dominance**: 12 months

## üÜï Recent Additions & Enhancements

### **‚úÖ COMPLETED: Feature Gates & Dynamic Limits System (Phase 1)**
**Migration Date**: January 2025
**Status**: ‚úÖ PRODUCTION READY

#### **Phase 1 Deliverables Completed:**
- **‚úÖ Step 1.1**: Enhanced FeatureGates admin component with daily limits UI
- **‚úÖ Step 1.2**: Dynamic daily watch time limits (replaced hardcoded values)
- **‚úÖ Step 1.3**: New feature gates implementation:
  - `scrolling_lyrics` (HERO only) with access control + upgrade modals
  - `login_resume` (ROADIE+) ready for integration
  - `caption_sharing` (ROADIE+) ready for integration
- **‚úÖ Step 1.4**: Enhanced save logic with validation and error handling

#### **Technical Achievements:**
- **Admin Interface**: Full CRUD with validation, test buttons, and real-time preview
- **Access Control**: Dynamic tier checking across all watch pages
- **User Experience**: Contextual upgrade prompts with direct pricing links
- **Database Integration**: JSONB-based configuration in admin_settings table
- **Error Handling**: Robust validation with graceful fallbacks

### **‚úÖ Completed Database Infrastructure**
- **Creator Revenue Sharing System**: Complete database schema for tracking per-channel watch time and monthly payouts
- **Caption Management System**: Full database support for user captions with sharing capabilities
- **Advanced Sharing Features**: Database support for expiration-based sharing links with usage tracking
- **Enterprise Security**: Row Level Security (RLS) policies for all new tables

### **üîÑ Next Migration Phases (Branch2 ‚Üí Main)**

#### **Phase 2: SVG Chord Library Building System** üé∏
**Priority**: HIGH
**Dependencies**: Feature Gates System (‚úÖ Complete)
**Deliverables**:
- Complete chord processing pipeline from Branch2
- SVG chord diagram generation and display
- Chord library management interface
- Integration with existing caption system

#### **Phase 3: Enhanced Lyrics API Integration** üìù
**Priority**: HIGH
**Dependencies**: Phase 2 completion
**Deliverables**:
- Server-side HTML escaping fixes from Branch2
- Enhanced lyrics processing and display
- API error handling improvements
- Fallback content generation

#### **Phase 4: Database Schema Updates** üóÑÔ∏è
**Priority**: MEDIUM
**Dependencies**: Phases 2-3 completion
**Deliverables**:
- Song database schema enhancements
- Chord progression storage optimization
- Performance improvements and indexing
- Data migration scripts

#### **Phase 5: Documentation & Architecture Updates** üìö
**Priority**: LOW
**Dependencies**: All previous phases
**Deliverables**:
- Updated system architecture documentation
- API documentation refresh
- Developer onboarding guides
- Performance optimization guides

### **üîÑ In Progress**
- **Frontend Supabase Integration**: Connecting watch.js to new database tables
- **Caption CRUD Operations**: Implementing create, read, update, delete for captions
- **Watch Time Tracking**: Implementing per-channel watch time monitoring

### **üìã Planned Enhancements**
- **Real-time Caption Updates**: Supabase real-time subscriptions for live collaboration
- **Caption Analytics**: Track caption usage, sharing, and community engagement
- **Advanced Creator Tools**: Enhanced analytics and payout management for creators
- **Community Features**: Caption rating, commenting, and community moderation


// DEMAND-DRIVEN-SONG-DATA-STRATEGY:

# üéØ **DEMAND-DRIVEN SONG DATA STRATEGY**
## **Updated Roadmap for GuitarMagic Auto-Generation System**

---

## **üìã EXECUTIVE SUMMARY**

**REVISED APPROACH**: Instead of randomly scraping thousands of songs hoping users want them, we're building a **demand-driven, user-requested song library** that grows organically based on what our actual users need.

**KEY BENEFITS**:
- ‚úÖ **Quality over Quantity**: Focus on accuracy, not volume
- ‚úÖ **User Satisfaction**: Only generate captions for videos we can do well
- ‚úÖ **Organic Growth**: Library builds based solely on user demand
- ‚úÖ **Resource Efficiency**: No wasted scraping of unwanted songs

---

## **üèóÔ∏è ARCHITECTURE OVERVIEW**

### **Data Sources & Storage**
- **Public Data Only**: We scrape websites for public-facing song data only
- **Data Types**: Song titles, artist names, lyrics, chords, tab captions, timeline metadata
- **Storage**: All data stored permanently in Supabase (no public API)
- **No Random Scraping**: We only scrape songs that users specifically request

### **Chord System Architecture**
**Two-Table Design:**
1. **`chord_captions`** (‚úÖ ALREADY BUILT)
   - Placeholder records for organizing schema logically
   - Allows users to select chord names in UI for custom chord captions
   - Links to `chord_sync_groups` for organization

2. **`chord_positions`** (üÜï TO BE BUILT)
   - Actual chord data for rendering (strings, frets, fingering)
   - Final SVG file URLs from AWS S3
   - Multiple position variants per chord (open, barre, different frets)
   - Black/white chord SVG images for light/dark themes

---

## **üöÄ AUTO-GENERATION WORKFLOW**

### **User Request Process**
1. **Premium Feature**: Only available to highest-tier paid members
2. **Request Form**: Users submit YouTube video URLs they want auto-generated
3. **Smart Scraping**: We scrape Ultimate Guitar for that specific song
4. **Accuracy Validation**: Compare video length/characteristics with scraped data
5. **Data Linking**: If accurate enough, link caption data to video URL in Supabase
6. **Fallback**: If video differs significantly, notify user and suggest alternatives

### **Accuracy Validation Criteria**
- **Video Length**: Must match song metadata within acceptable tolerance
- **Key Consistency**: Ensure chord progressions match video audio
- **Cover Detection**: Identify if video is original vs. cover version
- **Quality Score**: Rate confidence level of auto-generation accuracy

---

## **üìä NEW DATABASE TABLES**

### **`chord_positions`** - Chord Rendering Data & SVG URLs
```sql
CREATE TABLE chord_positions (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    chord_name TEXT NOT NULL, -- e.g., "Am", "C", "F"
    position_type TEXT NOT NULL, -- "open", "barre", "power", "sus2", etc.
    fret_position INTEGER NOT NULL, -- 0 for open, 1-12 for fretted
    strings JSONB NOT NULL, -- ["E", "A", "D", "G", "B", "E"]
    frets JSONB NOT NULL, -- ["X", "0", "2", "2", "1", "0"]
    fingering JSONB NOT NULL, -- ["X", "X", "1", "2", "3", "X"]
    difficulty TEXT, -- "beginner", "intermediate", "advanced"
    aws_svg_url_light TEXT, -- S3 URL for light theme SVG
    aws_svg_url_dark TEXT, -- S3 URL for dark theme SVG
    svg_file_size INTEGER, -- File size in bytes
    metadata JSONB DEFAULT '{}', -- Additional chord info
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

### **`song_requests`** - User Auto-Generation Requests
```sql
CREATE TABLE song_requests (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id UUID REFERENCES user_profiles(id) ON DELETE CASCADE,
    youtube_video_url TEXT NOT NULL,
    youtube_video_id TEXT NOT NULL,
    song_title TEXT,
    artist_name TEXT,
    request_status TEXT DEFAULT 'pending', -- 'pending', 'processing', 'completed', 'failed'
    accuracy_score DECIMAL(3,2), -- 0.00 to 1.00 confidence rating
    validation_notes TEXT, -- Why accuracy score is what it is
    ultimate_guitar_data JSONB, -- Raw scraped data from UG
    processed_captions JSONB, -- Final processed caption data
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

### **`auto_generated_captions`** - UG-Based Caption Data
```sql
CREATE TABLE auto_generated_captions (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    song_request_id UUID REFERENCES song_requests(id) ON DELETE CASCADE,
    youtube_video_id TEXT NOT NULL,
    caption_type TEXT NOT NULL, -- 'chords', 'lyrics', 'tabs'
    start_time TEXT NOT NULL, -- "MM:SS" format
    end_time TEXT NOT NULL, -- "MM:SS" format
    content TEXT NOT NULL, -- Chord name, lyric line, or tab data
    section_type TEXT, -- 'intro', 'verse', 'chorus', 'bridge', 'outro'
    confidence_score DECIMAL(3,2), -- Individual caption accuracy
    metadata JSONB DEFAULT '{}', -- Additional timing or musical info
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

---

## **üé∏ IMPLEMENTATION PHASES**

### **Phase 1: Foundation (Weeks 1-2)**
- [ ] Build `chord_positions` table and populate with existing chord data
- [ ] Create AWS S3 integration for SVG storage
- [ ] Build chord position selection UI in existing chord system

### **Phase 2: Auto-Generation Infrastructure (Weeks 3-4)**
- [ ] Create `song_requests` and `auto_generated_captions` tables
- [ ] Build user request form for premium members
- [ ] Implement Ultimate Guitar scraper integration
- [ ] Build accuracy validation system

### **Phase 3: Auto-Generation Features (Weeks 5-6)**
- [ ] Implement smart scraping for user-requested songs
- [ ] Build caption generation from UG data
- [ ] Create accuracy scoring and validation
- [ ] Implement fallback handling for inaccurate matches

### **Phase 4: Integration & Testing (Weeks 7-8)**
- [ ] Integrate auto-generated captions with existing caption system
- [ ] Build user feedback and quality improvement system
- [ ] Comprehensive testing and bug fixes
- [ ] User documentation and onboarding

---

## **üåü SUCCESS METRICS**

### **Technical Metrics**
- **Accuracy Rate**: 90%+ of auto-generated captions meet quality standards
- **Processing Time**: < 5 minutes from user request to caption generation
- **Fallback Rate**: < 10% of requests require manual intervention

### **User Engagement Metrics**
- **Request Volume**: 50+ song requests per month from premium users
- **Satisfaction Rate**: 4.5+ star rating for auto-generated captions
- **Feature Adoption**: 70% of premium users try auto-generation

### **Business Metrics**
- **Premium Conversion**: 20% increase in premium tier upgrades
- **User Retention**: 85% of users return within 7 days
- **Content Quality**: Professional-grade captions that rival commercial platforms

---

## **üîç KEY TECHNICAL DECISIONS**

### **Ultimate Guitar Integration**
- **Scraper**: Use existing `https://github.com/Pilfer/ultimate-guitar-scraper`
- **Data Types**: Focus on chord progressions, lyrics, and tab timing
- **Validation**: Implement smart matching between video and scraped data
- **Fallback**: Provide alternatives when accuracy is insufficient

### **AWS S3 Integration**
- **Storage**: Pre-built SVG files for all chord positions
- **URLs**: Predictable, CDN-ready URLs for fast loading
- **Themes**: Separate light/dark theme SVGs for each chord
- **Organization**: `/chords/{theme}/{chordName}_{positionType}.svg`

### **Quality Assurance**
- **Accuracy Scoring**: 0.00 to 1.00 confidence rating system
- **Validation Rules**: Video length, key consistency, cover detection
- **User Feedback**: Continuous improvement based on user ratings
- **Manual Review**: Human oversight for borderline accuracy cases

---

**This demand-driven approach ensures GuitarMagic builds exactly what users want, when they want it, with the highest possible quality standards.** üéØ‚ú®

---

## **üé≠ USER-ASSISTED CAPTIONS COMMUNITY SHARING SYSTEM**

### **üìã Post-MVP Feature Enhancement (Phase 5+)**

**Overview**: A revolutionary community-driven system that solves the fundamental challenge of timing accuracy in chord captions through crowdsourced user assistance and community collaboration.

**üìö Complete Documentation**: See `docs/User_assisted_captions_community_sharing.md` for comprehensive system architecture, database schemas, and implementation details.

### **üéØ Core Concept**
Instead of relying solely on automated timing detection, this system enables users to manually mark chord timing points while watching videos, creating a collaborative database of accurate timing data that benefits the entire community.

### **üåü Key Features**
- **User Assistance Workflow**: Users can mark missing timing data for songs
- **Community Rating System**: Quality scoring for user contributions
- **Version Management**: Multiple timing configurations per song
- **Community Sharing**: Users can share and rate different timing versions
- **Quality Assurance**: Poor-quality contributions can be flagged for re-assistance

### **üóÑÔ∏è Database Architecture**
- **Enhanced songs table** with user assistance flags and metadata
- **User assistance tracking** with email and timestamp recording
- **Quality rating system** for community feedback
- **Version control** for multiple timing configurations

### **üöÄ Implementation Phases**
1. **Phase 1**: Basic user assistance (single user per song)
2. **Phase 2**: Community rating and quality management
3. **Phase 3**: Version control and sharing system
4. **Phase 4**: Advanced collaboration features

### **üí° Alternative Solutions**
The system also explores automated timing detection through:
- **Waveform analysis** for automatic timing detection
- **Audio processing** to identify chord changes and section boundaries
- **Machine learning models** trained on user-assisted data
- **BPM detection** for automatic timing estimation

**This community-driven approach transforms GuitarMagic from a passive platform into an active learning community, where users contribute to and benefit from collective knowledge.** üé∏ü§ù‚ú®
